[{"C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\app\\layout.js":"1","C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\app\\page.js":"2","C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\components\\course.js":"3","C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\components\\courses.js":"4","C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\components\\dashboard.js":"5","C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\components\\filteringpage.js":"6","C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\components\\filters.js":"7","C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\components\\footer.js":"8","C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\components\\landingpage.js":"9"},{"size":824,"mtime":1701081044708,"results":"10","hashOfConfig":"11"},{"size":380,"mtime":1701081044709,"results":"12","hashOfConfig":"11"},{"size":6772,"mtime":1701081054477,"results":"13","hashOfConfig":"11"},{"size":1084,"mtime":1701081054478,"results":"14","hashOfConfig":"11"},{"size":11157,"mtime":1701081054488,"results":"15","hashOfConfig":"11"},{"size":12262,"mtime":1701081054520,"results":"16","hashOfConfig":"11"},{"size":2593,"mtime":1701081054520,"results":"17","hashOfConfig":"11"},{"size":1288,"mtime":1701081054535,"results":"18","hashOfConfig":"11"},{"size":5880,"mtime":1701081054535,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9to588",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\app\\layout.js",[],[],"C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\app\\page.js",[],[],"C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\components\\course.js",[],[],"C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\components\\courses.js",[],[],"C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\components\\dashboard.js",["48"],[],"\"use client\";\r\n\r\nimport ApexCharts from \"apexcharts\";\r\nimport { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport $ from \"jquery\";\r\nimport \"../public/js/jquery-jvectormap-2.0.5.min\";\r\nimport \"../public/js/jquery-jvectormap-world-mill\";\r\n\r\nimport { useCourses } from \"./courses\";\r\nfunction createBarGraph(data, updateCourses) {\r\n  const categories = data.map((item) => item.country_name);\r\n  const courseCounts = data.map((item) => item.course_count);\r\n\r\n  const options = {\r\n    series: [\r\n      {\r\n        data: courseCounts,\r\n      },\r\n    ],\r\n    title: {\r\n      text: \"Number of institution by location\",\r\n      align: \"center\",\r\n      style: {\r\n        fontSize: \"16px\",\r\n      },\r\n    },\r\n    chart: {\r\n      type: \"bar\",\r\n      height: 500,\r\n      width: \"100%\",\r\n      fontFamily: \"Heebo, monospace\",\r\n      events: {\r\n        // when each point of the bargraoh is clicked on it renders courses belonging to the clicked country on the bargraph\r\n        dataPointSelection: async function (event, chartContext, config) {\r\n          const country_name =\r\n            config.w.config.xaxis.categories[config.dataPointIndex];\r\n          // Fetch and render courses for the clicked category\r\n          const courseResponse = await fetch(\r\n            `https://mhadri-final-database-af023718fb18.herokuapp.com/api/country_by_name/${country_name}/`\r\n          );\r\n          const countryCourses = await courseResponse.json();\r\n          const coursesContainer = $(\".courses\");\r\n          updateCourses(countryCourses.data);\r\n          setTimeout(() => {\r\n            coursesContainer.get(0).scrollIntoView({ behavior: \"smooth\" });\r\n          }, 200);\r\n        },\r\n      },\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        borderRadius: 4,\r\n        horizontal: true,\r\n      },\r\n    },\r\n    dataLabels: {\r\n      enabled: false,\r\n    },\r\n    xaxis: {\r\n      categories: categories,\r\n    },\r\n    grid: {\r\n      show: true,\r\n      yaxis: {\r\n        lines: {\r\n          show: false,\r\n        },\r\n      },\r\n      xaxis: {\r\n        lines: {\r\n          show: true,\r\n        },\r\n      },\r\n      columns: {\r\n        opacity: 0.5,\r\n      },\r\n    },\r\n    tooltip: {\r\n      followCursor: true,\r\n      x: {\r\n        show: false,\r\n      },\r\n      marker: {\r\n        show: false,\r\n      },\r\n      y: {\r\n        title: {\r\n          formatter: (seriesName) => \"\",\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const chart = new ApexCharts(document.querySelector(\"#bargraph\"), options);\r\n  chart.render();\r\n}\r\n\r\nconst createMap = (id, data, updateCourses) => {\r\n  let mapData = {};\r\n\r\n  // creates an object for the chloropleth effect on the map\r\n  for (var i = 0; i < data.length; i++) {\r\n    var countryCode = Object.keys(data[i])[0];\r\n    var courseCount = data[i][countryCode];\r\n    mapData[countryCode] = courseCount;\r\n  }\r\n\r\n  console.log(\"map data: \", mapData);\r\n\r\n  const mapObject = $(id).vectorMap({\r\n    map: \"world_mill\",\r\n    backgroundColor: \"transparent\",\r\n    zoomOnScroll: true,\r\n    regionStyle: {\r\n      initial: {\r\n        fill: \"#333333\",\r\n        \"fill-opacity\": 1,\r\n      },\r\n      hover: {\r\n        \"fill-opacity\": 0.6,\r\n      },\r\n      selected: {\r\n        fill: \"white\",\r\n      },\r\n    },\r\n    series: {\r\n      regions: [\r\n        {\r\n          values: mapData,\r\n          scale: [\"#C8EEFF\", \"#0071A4\"],\r\n          normalizeFunction: \"polynomial\",\r\n          min: 0,\r\n          max: Math.max(...Object.values(mapData)),\r\n          defaultFill: \"#727272\",\r\n        },\r\n      ],\r\n    },\r\n    onRegionTipShow: function (e, el, code) {\r\n      var countryName = $(id).vectorMap(\"get\", \"mapObject\").getRegionName(code);\r\n      var courseCount = mapData[code];\r\n      if (courseCount) {\r\n        el.html(countryName + \" - \" + courseCount);\r\n      } else {\r\n        el.html(countryName + \" - O\");\r\n      }\r\n    },\r\n    onRegionClick: async function (event, code) {\r\n      try {\r\n        const courseResponse = await fetch(`https://mhadri-final-database-af023718fb18.herokuapp.com/api/courses_by_country/${code}/`);\r\n        const data = await courseResponse.json();\r\n        updateCourses(data.data.data);\r\n        const typeofcourseRespone = await fetch(\r\n          `https://mhadri-final-database-af023718fb18.herokuapp.com/api/type_of_course_counts_by_code/${code}/`\r\n        );\r\n        const typeofcourseData = await typeofcourseRespone.json();\r\n        const teachingmechanismRespone = await fetch(\r\n          `https://mhadri-final-database-af023718fb18.herokuapp.com/api/teaching_mechanism_counts_by_code/${code}/`\r\n        );\r\n        const teachingmechanismData = await teachingmechanismRespone.json();\r\n        const piechart1 = document.querySelector(\"#piechart1\");\r\n        const piechart2 = document.querySelector(\"#piechart2\");\r\n        if (piechart1) {\r\n          createPieChart(\r\n            \"#piechart1\",\r\n            teachingmechanismData.data,\r\n            \"donut\",\r\n            200,\r\n            \"#727272\",\r\n            \"Teaching mechanisms\",\r\n            code\r\n          );\r\n        }\r\n        if (piechart2) {\r\n          createPieChart(\r\n            \"#piechart2\",\r\n            typeofcourseData.data,\r\n            \"donut\",\r\n            200,\r\n            \"#0071A4\",\r\n            \"Type of Course\",\r\n            code\r\n          );\r\n        }\r\n        piechart1.scrollIntoView({ behavior: \"smooth\" });\r\n      } catch (error) {\r\n        console.error(`Error fetching course data: ${error}`);\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\nasync function createPieChart(\r\n  chartId,\r\n  data,\r\n  chartType,\r\n  legend_height,\r\n  pieColor,\r\n  title,\r\n  code\r\n) {\r\n  const options = {\r\n    series: data.data,\r\n    labels: data.labels,\r\n    dataLabels: {\r\n      enabled: false,\r\n    },\r\n    legend: {\r\n      position: \"right\",\r\n      height: legend_height,\r\n    },\r\n    responsive: [\r\n      {\r\n        breakpoint: 1490,\r\n        options: {\r\n          chart: {\r\n            width: \"100%\",\r\n            height: \"500px\",\r\n          },\r\n          legend: {\r\n            position: \"bottom\",\r\n          },\r\n        },\r\n      },\r\n    ],\r\n    title: {\r\n      text: title,\r\n      align: \"center\",\r\n      style: {\r\n        fontSize: \"14px\",\r\n        fontFamily: \"IBM Plex Mono, monospace\",\r\n      },\r\n    },\r\n    theme: {\r\n      monochrome: {\r\n        enabled: true,\r\n        color: pieColor,\r\n        shadeTo: \"dark\",\r\n        shadeIntensity: 0.5,\r\n      },\r\n    },\r\n    chart: {\r\n      type: chartType,\r\n      height: \"369px\",\r\n      events: {\r\n        // clicking on the piechart will render courses with that specific filter indicated by the piechart\r\n        dataPointSelection: async function (event, chartContext, config) {\r\n          // const category = config.w.config.labels[config.dataPointIndex];\r\n          // const response = await fetch(`/api/courses_by_category_code/${code}/${category}`);\r\n          // const data = response.json();\r\n          // console.log(`Response from ${code}, ${category}: `, data.data);\r\n        },\r\n      },\r\n    },\r\n  };\r\n  if (typeof window !== 'undefined' && typeof window[chartId] === 'undefined') {\r\n    // Create a new chart instance\r\n    window[chartId] = new ApexCharts(document.querySelector(chartId), options);\r\n    await window[chartId].render();\r\n  } else if (typeof window !== 'undefined') {\r\n    // Update the existing chart instance\r\n    console.log(\"window: \", window[chartId]);\r\n    console.log(data.data);\r\n    await window[chartId].updateSeries(data.data, true); // Update series data\r\n    await window[chartId].updateOptions(options);\r\n  }\r\n}\r\n\r\nexport default function Dashboard() {\r\n  const { setCourses } = useCourses();\r\n  const updateCourses = (data) => {\r\n    setCourses(data);\r\n  };\r\n  const id = \"#map\";\r\n  const barId = \"#bargraph\";\r\n  const pieOne = \"#piechart1\";\r\n  const pieTwo = \"#piechart2\";\r\n  \r\n\r\n  const fetchBarData = async () => {\r\n    try {\r\n      const response = await fetch(\"https://mhadri-final-database-af023718fb18.herokuapp.com/api/country_course_count/\");\r\n      const data = await response.json();\r\n      console.log(\"bar data response: \", data);\r\n      createBarGraph(data, updateCourses);\r\n      console.log(\"Bar graph created\");\r\n    } catch (error) {\r\n      console.log(\"Error fetching bar data: \", error);\r\n    }\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch(\"https://mhadri-final-database-af023718fb18.herokuapp.com/country_chloropleth/\");\r\n      const data = await response.json();\r\n      createMap(id, data, updateCourses);\r\n    } catch (error) {\r\n      console.error(\"Error fetching map data:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchPieOneData = async () => {\r\n    try {\r\n      const response = await fetch(\"https://mhadri-final-database-af023718fb18.herokuapp.com/api/teaching_mechanism_counts/\");\r\n      const data = await response.json();\r\n      createPieChart(\r\n        pieOne,\r\n        data,\r\n        \"donut\",\r\n        200,\r\n        \"#727272\",\r\n        \"Teaching mechanisms\",\r\n        false\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error fetching pieOne data: \", error);\r\n    }\r\n  };\r\n\r\n  const fetchPieTwoData = async () => {\r\n    try {\r\n      const response = await fetch(\"https://mhadri-final-database-af023718fb18.herokuapp.com/api/types_of_course_counts/\");\r\n      const data = await response.json();\r\n      createPieChart(\r\n        pieTwo,\r\n        data,\r\n        \"donut\",\r\n        200,\r\n        \"#0071A4\",\r\n        \"Type of Course\",\r\n        false\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error fetching pieTwo data: \", error);\r\n    }\r\n  };\r\n\r\n  const resetStats = () => {\r\n    fetchPieOneData();\r\n    fetchPieTwoData();\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    fetchBarData();\r\n    fetchPieOneData();\r\n    fetchPieTwoData();\r\n  }, []);\r\n  return (\r\n    <div\r\n      id=\"stats_page_wrapper\"\r\n      className=\"p-4 w-full flex justify-center items-center\"\r\n    >\r\n      <div\r\n        id=\"stats_page_card\"\r\n        className=\"w-11/12 p-6 rounded-lg self-center\"\r\n        style={{ boxShadow: \"0 0 20px -3px rgba(0, 0, 0, 0.25)\" }}\r\n      >\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          <div>\r\n            <h2 className=\"text-gray-900 text-title font-bold text-center\">\r\n              Number of courses/trainings offered per country\r\n            </h2>\r\n            <div id=\"map\" className=\"rounded-lg self-center\"></div>\r\n          </div>\r\n\r\n          <div\r\n            id=\"bargraph\"\r\n            className=\"py-4 self-center flex justify-center w-full\"\r\n          ></div>\r\n        </div>\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-2 mt-6\">\r\n          <div id=\"piechart1\" className=\"overflow-hidden\"></div>\r\n          <div id=\"piechart2\" className=\"overflow-hidden\"></div>\r\n        </div>\r\n\r\n        <div id=\"reset-filters\" className=\"mt-8\">\r\n          <button\r\n            id=\"reset_stats_page\"\r\n            onClick={resetStats}\r\n            className=\"bg-blue-500 text-white px-4 py-2 rounded-full hover:bg-blue-600 focus:outline-none focus:shadow-outline-blue active:bg-blue-800 transition duration-150\"\r\n          >\r\n            Reset stats\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\components\\filteringpage.js",[],[],"C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\components\\filters.js",[],[],"C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\components\\footer.js",[],[],"C:\\Users\\cparker\\OneDrive - WRHI\\Desktop\\Web_Dev\\mhadri-final-nextjs\\components\\landingpage.js",[],[],{"ruleId":"49","severity":1,"message":"50","line":348,"column":6,"nodeType":"51","endLine":348,"endColumn":8,"suggestions":"52"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchBarData' and 'fetchData'. Either include them or remove the dependency array.","ArrayExpression",["53"],{"desc":"54","fix":"55"},"Update the dependencies array to be: [fetchBarData, fetchData]",{"range":"56","text":"57"},[9730,9732],"[fetchBarData, fetchData]"]